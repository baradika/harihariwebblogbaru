---
import '../styles/global.css';
import Breadcrumb from '../components/Breadcrumb.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import Head from '../components/Head.astro';
import ScrollToTop from '../components/ScrollToTop.astro';

interface Props {
  title: string;
  description?: string;
  keywords?: string[];
  image?: string;
  author?: string;
  type?: 'website' | 'article';
  publishDate?: Date;
}

const {
  title,
  description = 'Web Developer and CTF Player from Jakarta, Indonesia',
  keywords,
  image,
  author,
  type,
  publishDate
} = Astro.props as Props;

const navItems = [
  {
    url: '/',
    title: 'Home',
  },
  {
    url: '/achievements',
    title: 'Achievements',
  },
  {
    url: '/writeups',
    title: 'Writeups',
  },
  {
    url: '/notes',
    title: 'Notes',
  },
  {
    url: '/projects',
    title: 'Projects',
  },
];

const footerItems = [
  {
    url: 'mailto:nexzter.net@gmail.com',
    title: 'Contact',
    iconName: 'lucide:mail',
  },
  {
    url: 'https://www.youtube.com/@baradika6844',
    title: 'YouTube',
    iconName: 'lucide:youtube',
  },
  {
    url: 'https://github.com/baradika',
    title: 'GitHub',
    iconName: 'lucide:github',
  },
  {
    url: 'https://www.linkedin.com/in/faseraisbaradika',
    title: 'LinkedIn',
    iconName: 'lucide:linkedin',
  },
];

let paths = Astro.url.pathname.split('/').map((path, index, paths) => {
  if (index === 0) {
    return {
      label: 'home',
      href: '/',
    };
  }

  if (index === paths.length - 1) {
    return {
      label: decodeURIComponent(path),
      href: Astro.url.pathname,
    };
  }

  return {
    label: decodeURIComponent(path),
    href: paths.slice(0, index + 1).join('/'),
  };
});

paths = paths.filter((path) => path.label !== '');
---

<!doctype html>
<html lang="en">
  <head>
    <Head
      title={title}
      description={description}
      keywords={keywords || []}
      image={image || ''}
      author={author || 'b4r'}
      type={type || 'website'}
      publishDate={publishDate || new Date('2023-01-01')}
    />
  </head>
  <body
    class="bg-flexoki-light-bg dark:bg-flexoki-dark-bg text-flexoki-light-tx dark:text-flexoki-dark-tx antialiased"
  >
    <div class="flex flex-col min-h-svh">
      <Header items={navItems} />

      <main class="flex-1">
        <slot name="top" />
        {
          paths.length !== 1 && (
            <Breadcrumb
              items={paths}
              class="flex flex-col p-4 mx-auto max-w-screen-md"
            />
          )
        }
        <slot />
      </main>

      <ScrollToTop />
      <Footer items={footerItems} />
    </div>
  </body>
</html>

<script>
  const onIdle = (cb) => (window.requestIdleCallback || ((cb) => setTimeout(cb, 1)))(cb);

  onIdle(() => {
    const buttons = document.querySelectorAll('.copy-button');
    buttons.forEach((btn) => {
      const code = btn.getAttribute('data-code') || '';
      const label = btn.querySelector('.copy-label');
      let timeout;

      btn.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(code);
          btn.classList.add('copied');
          if (label) label.textContent = 'Copied!';
          clearTimeout(timeout);
          timeout = setTimeout(() => {
            btn.classList.remove('copied');
            if (label) label.textContent = 'Copy';
          }, 1500);
        } catch (e) {
          if (label) label.textContent = 'Failed';
          clearTimeout(timeout);
          timeout = setTimeout(() => {
            if (label) label.textContent = 'Copy';
          }, 1500);
        }
      });
    });
  });
</script>
