---
import { getCollection } from 'astro:content';
import MainLayout from '../../../layouts/MainLayout.astro';
import Prose from '../../../components/core/Prose.astro';
import Card from '../../../components/core/Card.astro';

export async function getStaticPaths() {
  const noteCategories = await getCollection('noteCategories');
  const paths = noteCategories.map((category) => {
    const categoryName = category.id.split('/')[0];
    return {
      params: { category: categoryName },
      props: { category },
    };
  });
  return paths;
}

type Props = {
  category: any;
};

const { category } = Astro.props;
const categoryName = category.id.split('/')[0];

// Get all notes in this category
const allNotes = await getCollection('notes', ({ id }) => 
  id.startsWith(categoryName + '/') && !id.endsWith('README.md')
);

// Sort notes by date (newest first)  
const sortedNotes = allNotes.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get unique tags for filtering
const allTags = [...new Set(allNotes.flatMap(note => 
  Array.isArray(note.data.tags) ? note.data.tags : (note.data.tags ? [note.data.tags] : [])
))];

const pageTitle = `${category.data.title} - Notes`;
const pageDescription = category.data.description;
---

<MainLayout title={pageTitle} description={pageDescription}>
  <Prose>
    <h1 class="font-medium">{category.data.title}</h1>
    <p>{category.data.description}</p>
    
    <div class="not-prose mt-8">
      <!-- Tag Filter -->
      {allTags.length > 0 && (
        <div class="flex flex-wrap gap-2 items-center mb-6">
          <span class="font-medium text-sm">Filter by tag:</span>
          <button 
            class="text-xs font-medium px-2.5 py-0.5 rounded bg-flexoki-light-ui dark:bg-flexoki-dark-ui filter-btn selected-filter" 
            data-tag="all"
          >
            All
          </button>
          {allTags.map((tag) => (
            <button 
              class="bg-flexoki-base-100 dark:bg-flexoki-base-900 text-xs font-medium px-2 py-1 rounded filter-btn"
              data-tag={tag}
            >
              #{tag}
            </button>
          ))}
        </div>
      )}

      <!-- Notes Grid -->
      <div class="flex flex-col gap-4">
        {sortedNotes.length === 0 ? (
          <div class="text-center py-8">
            <p class="text-flexoki-light-tx-2 dark:text-flexoki-dark-tx-2">
              No notes found in this category.
            </p>
          </div>
        ) : (
          sortedNotes.map((note) => (
            <Card 
              href={`/notes/${categoryName}/${note.id.split('/')[1]?.replace('.md', '') || ''}`}
              class="note-card"
              data-tags={Array.isArray(note.data.tags) ? note.data.tags.join(',') : (note.data.tags || '')}
            >
              <div slot="content" class="flex flex-col gap-2">
                <div class="flex items-start justify-between">
                  <p class="font-medium flex-1">{note.data.title}</p>
                  <span class="text-xs text-flexoki-light-tx-2 dark:text-flexoki-dark-tx-2 flex-shrink-0 ml-4">
                    {note.data.date.toLocaleDateString('en-US', { 
                      year: 'numeric', 
                      month: 'short', 
                      day: 'numeric' 
                    })}
                  </span>
                </div>
                <p class="text-flexoki-light-tx-2 dark:text-flexoki-dark-tx-2 text-sm">
                  {note.data.description}
                </p>
                <div class="flex flex-wrap items-center gap-2">
                  {note.data.tags && Array.isArray(note.data.tags) && note.data.tags.map((tag) => (
                    <span class="bg-flexoki-base-100 dark:bg-flexoki-base-900 text-xs font-medium px-2 py-1 rounded">
                      #{tag}
                    </span>
                  ))}
                </div>
              </div>
            </Card>
          ))
        )}
      </div>
    </div>
  </Prose>
</MainLayout>

<script>
  const onIdle = (cb: IdleRequestCallback) =>
    (window.requestIdleCallback || ((cb) => setTimeout(cb, 1)))(cb);

  onIdle(() => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const noteCards = document.querySelectorAll('.note-card');

    filterButtons.forEach((button) => {
      button.addEventListener('click', () => {
        // Remove selected class from all buttons
        filterButtons.forEach((btn) => btn.classList.remove('selected-filter'));
        // Add selected class to clicked button
        button.classList.add('selected-filter');

        const selectedTag = button.getAttribute('data-tag');
        if (!selectedTag) {
          return;
        }

        noteCards.forEach((card) => {
          const cardElement = card as HTMLElement;
          if (selectedTag === 'all') {
            cardElement.style.display = 'block';
          } else {
            const cardTags = cardElement.getAttribute('data-tags') || '';
            cardElement.style.display = cardTags.includes(selectedTag) ? 'block' : 'none';
          }
        });
      });
    });
  });
</script>
