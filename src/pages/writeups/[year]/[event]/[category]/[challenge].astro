---
import type { MarkdownHeading } from 'astro';
import { getCollection, render, type CollectionEntry } from 'astro:content';
import ChallengeMeta from '../../../../../components/ChallengeMeta.astro';
import WriteupLayout from '../../../../../layouts/WriteupLayout.astro';
import ChallengeFlag from '../../../../../components/ChallengeFlag.astro';

export async function getStaticPaths() {
  const eventChallengeCollections = await getCollection('eventChallenges', ({ data }) => data.draft !== true);
  const paths = eventChallengeCollections.map((eventChallenge) => {
    const slugs = eventChallenge.id.split('/');
    return {
      params: {
        year: slugs[0],
        event: slugs[1],
        category: slugs[2],
        challenge: slugs[3],
      },
      props: {
        eventChallenge: eventChallenge,
      },
    };
  });

  return paths;
}

interface Props {
  eventChallenge: CollectionEntry<'eventChallenges'>;
}

interface Params {
  year: string;
  event: string;
  category: string;
  challenge: string;
}

const props: Props = Astro.props;
const params = Astro.params as Params;

const renderedEventChallenge = await render(props.eventChallenge);
const headings: MarkdownHeading[] = renderedEventChallenge.headings;

const events = await getCollection(
  'events',
  ({ id }) =>
    id.split('/')[0] === params.year && id.split('/')[1] === params.event
);

const eventName = events[0]?.data?.title ?? '';
const challengeTitle = props.eventChallenge.data.title;
const challengeCategory = params.category;
const year = params.year;
const points = props.eventChallenge.data.points;
const difficulty = points < 200 ? 'easy' : (points < 400 ? 'medium' : 'hard');

const pageTitle = `${challengeTitle} - ${eventName} Writeup`;
const pageDescription = `Detailed solution for the ${challengeTitle} challenge (${challengeCategory}) from ${eventName} CTF ${year}. ${points} points, ${difficulty} difficulty.`;

const keywords = [
  `${eventName}`,
  `${eventName} writeup`,
  `${eventName} solutions`,

  `${eventName} ${challengeCategory}`,
  `${eventName} ${challengeCategory} writeup`,
  `${eventName} ${challengeCategory} solution`,

  `${challengeTitle}`,
  `${challengeTitle} writeup`,
  `${challengeTitle} solution`,

  `${eventName} ${challengeTitle}`,
  `${eventName} ${challengeTitle} writeup`,
  `${eventName} ${challengeTitle} solution`,
].filter(Boolean);

const publishDate = new Date(parseInt(year), 0, 1);
---

<WriteupLayout 
  title={pageTitle}
  description={pageDescription}
  keywords={keywords}
  type="article"
  publishDate={publishDate}
  {headings}
>
  <h1 class="text-4xl font-bold" id="_halll">{props.eventChallenge.data.title}</h1>
  <ChallengeMeta event={props.eventChallenge} />
  <renderedEventChallenge.Content />
  <ChallengeFlag event={props.eventChallenge} >
</WriteupLayout>

<script is:inline>
  for (let level = 0; level <= 6; level++) {
    document.querySelectorAll(`main h${level}`).forEach((heading) => {
      const newLevel = Math.max(1, level - 2); // Ensure minimum level is h1
      const newHeading = document.createElement(`h${newLevel}`);
      newHeading.innerHTML = heading.innerHTML;
      Array.from(heading.attributes).forEach((attr) =>
        newHeading.setAttribute(attr.name, attr.value)
      );
      heading.replaceWith(newHeading);
    });
  }
</script>
